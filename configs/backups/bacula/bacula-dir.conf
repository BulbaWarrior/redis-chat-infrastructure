# You need to pass to this template following
# variables: 
# 0. my_addr - ip of itself
# 1. web_host_private_ips - array of web hosts ips
# 2. loadbalancer_private_ip - ip of load balancer host
# 3. database_private_ip - ip of database host
# 4. cicd_private_ip - ip of ci/cd host

#
# Storage
#

Storage {
  Name = backup-sd
  Address = ${my_addr}
  Password = "lywwc6U04sicbQfryL7s6jxFuWQ9W4ms5"
  Device = Local-device
  Media Type = File
}

#
# Misc
#

Schedule {
  Name = "RemoteDaily"
  Run = Full daily at 06:00
}

Pool {
  Name = RemotePool
  Pool Type = Backup
  LabelFormat = "RM-"
}

#
# FileSets
#

FileSet {
  Name = "web-fs"
  Include {
    Options {
      signature = MD5
    }
    File = /webapp
  }
}

FileSet {
  Name = "database-fs"
  Include {
    Options {
      signature = MD5
    }
    File = /data
  }
}

FileSet {
  Name = "loadbalancer-fs"
  Include {
    Options {
      signature = MD5
    }
    File = /etc/haproxy/
  }
}

FileSet {
  Name = "cicd-fs"
  Include {
    Options {
      signature = MD5
    }
    File = /jenkins_home
  }
}

#
# Clients
#

%{ for i, addr in web_host_private_ips ~}
Client {
  Name = web-${i}-fd
  Address = ${addr}
  FDPort = 9102
  Catalog = MyCatalog
  Password = "lywwc6U04sicbQfryL7s6jxFuWQ9W4ms5"
}
%{ endfor ~}

Client {
  Name = loadbalancer-fd
  Address = ${loadbalancer_private_ip}
  FDPort = 9102
  Catalog = MyCatalog
  Password = "lywwc6U04sicbQfryL7s6jxFuWQ9W4ms5"
}

Client {
  Name = database-fd
  Address = ${database_private_ip}
  FDPort = 9102
  Catalog = MyCatalog
  Password = "lywwc6U04sicbQfryL7s6jxFuWQ9W4ms5"
}

Client {
  Name = cicd-fd
  Address = ${cicd_private_ip}
  FDPort = 9102
  Catalog = MyCatalog
  Password = "lywwc6U04sicbQfryL7s6jxFuWQ9W4ms5"
}

#
# Backup Jobs
#

%{ for i, addr in web_host_private_ips ~}
Job {
  Client = "web-${i}-fd"
  Name = "web-${i}-backup"
  JobDefs = "DefaultJob"
  Enabled = yes
  Level = Full
  FileSet = "web-fs"
  Schedule = "RemoteDaily"
  Pool = "RemotePool"
  Storage = backup-sd
  Write Bootstrap = "/var/lib/bacula/RemoteBackup.bsr"
}
%{ endfor ~}

Job {
  Client = "loadbalancer-fd"
  Name = "loadbalancer-backup"
  JobDefs = "DefaultJob"
  Enabled = yes
  Level = Full
  FileSet = "loadbalancer-fs"
  Schedule = "RemoteDaily"
  Pool = "RemotePool"
  Storage = backup-sd
  Write Bootstrap = "/var/lib/bacula/RemoteBackup.bsr"
}

Job {
  Client = "database-fd"
  Name = "database-backup"
  JobDefs = "DefaultJob"
  Enabled = yes
  Level = Full
  FileSet = "database-fs"
  Schedule = "RemoteDaily"
  Pool = "RemotePool"
  Storage = backup-sd
  Write Bootstrap = "/var/lib/bacula/RemoteBackup.bsr"
}

Job {
  Client = "cicd-fd"
  Name = "cicd-backup"
  JobDefs = "DefaultJob"
  Enabled = yes
  Level = Full
  FileSet = "cicd-fs"
  Schedule = "RemoteDaily"
  Pool = "RemotePool"
  Storage = backup-sd
  Write Bootstrap = "/var/lib/bacula/RemoteBackup.bsr"
}

#
# Restore Jobs
#

%{ for i, addr in web_host_private_ips ~}
Job {
  Name = "web-${i}-restore"
  Type = Restore
  Client = "web-${i}-fd"
  FileSet = "web-fs"
  Storage = backup-sd
  Pool = "RemotePool"
  Messages = Standard
  Where = /opt/restore
  Bootstrap = "/var/lib/bacula/LocalhostBackup.bsr"
}
%{ endfor ~}

Job {
  Name = "loadbalancer-restore"
  Type = Restore
  Client = "loadbalancer-fd"
  FileSet = "loadbalancer-fs"
  Storage = backup-sd
  Pool = "RemotePool"
  Messages = Standard
  Where = /opt/restore
  Bootstrap = "/var/lib/bacula/LocalhostBackup.bsr"
}

Job {
  Name = "database-restore"
  Type = Restore
  Client = "database-fd"
  FileSet = "database-fs"
  Storage = backup-sd
  Pool = "RemotePool"
  Messages = Standard
  Where = /opt/restore
  Bootstrap = "/var/lib/bacula/LocalhostBackup.bsr"
}

Job {
  Name = "cicd-restore"
  Type = Restore
  Client = "cicd-fd"
  FileSet = "cicd-fs"
  Storage = backup-sd
  Pool = "RemotePool"
  Messages = Standard
  Where = /opt/restore
  Bootstrap = "/var/lib/bacula/LocalhostBackup.bsr"
}